generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  name        String
  title       String
  role        String
  email       String     @unique
  username    String     @unique
  password    String
  isAdmin     Boolean    @default(false)
  isActive    Boolean    @default(true)
  tasks       Task[]     @relation("UserTeams")
  activities  Activity[] @relation("UserActivities")
  notices     NoticeIsRead[] @relation("UserNotices")
  refreshToken String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Task {
  id          String     @id @default(uuid())
  title       String
  date        DateTime   @default(now())
  priority    String     @default("normal")
  stage       String     @default("todo")
  activities  Activity[] @relation("TaskActivities")
  subTasks    SubTask[]  @relation("TaskSubTasks")
  assets      String[]
  team        User[]     @relation("UserTeams")
  notices     Notice[]   @relation("TaskNotices")
  isTrashed   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Activity {
  id        String   @id @default(uuid())
  type      String   @default("assigned")
  activity  String?
  date      DateTime @default(now())
  task      Task     @relation("TaskActivities", fields: [taskId], references: [id])
  taskId    String
  by        User     @relation("UserActivities", fields: [byId], references: [id])
  byId      String
}

model SubTask {
  id       String   @id @default(uuid())
  title    String?
  date     DateTime?
  tag      String?
  task     Task     @relation("TaskSubTasks", fields: [taskId], references: [id])
  taskId   String
}

model Notice {
  id        String   @id @default(uuid())
  text      String?
  task      Task?    @relation("TaskNotices", fields: [taskId], references: [id])
  taskId    String?
  notiType  String   @default("alert")
  isRead    NoticeIsRead[] @relation("NoticeReads")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NoticeIsRead {
  id        String   @id @default(uuid())
  notice    Notice   @relation("NoticeReads", fields: [noticeId], references: [id])
  noticeId  String
  user      User     @relation("UserNotices", fields: [userId], references: [id])
  userId    String

  @@unique([noticeId, userId]) // Ensures a user can only read a notice once
}
