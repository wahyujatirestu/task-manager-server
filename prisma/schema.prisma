generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for Task Stage
enum TaskStage {
  TODO
  IN_PROGRESS @map("IN-PROGRESS")
  COMPLETED
}

// Enum for Activity Type
enum ActivityType {
  Assigned
  Started
  IN_PROGRESS @map("IN-PROGRESS")
  Bug
  Completed
  Commented
}

// Enum for User Role
enum UserRole {
  Admin
  User
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}


model User {
  id          String     @id @default(uuid())
  name        String?
  title       String?
  role        UserRole   @default(User)
  email       String     @unique
  username    String     @unique
  password    String
  isActive    Boolean    @default(true)
  isVerified Boolean  @default(false)
  verificationToken String?
  tasks       Task[]     @relation("UserTeams")
  activities  Activity[] @relation("UserActivities")
  notices     NoticeIsRead[] @relation("UserNotices")
  refreshToken String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tokens      Token[]   
}

model Task {
  id          String     @id @default(uuid())
  title       String
  date        DateTime   @default(now())
  priority    String     @default("normal")
  stage       TaskStage  @default(TODO) // Updated to enum
  activities  Activity[] @relation("TaskActivities")
  subTasks    SubTask[]  @relation("TaskSubTasks")
  assets      String[]
  team        User[]     @relation("UserTeams")
  notices     Notice[]   @relation("TaskNotices")
  isTrashed   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Activity {
  id        String        @id @default(uuid())
  type      ActivityType  @default(Assigned) // Updated to enum
  activity  String?
  date      DateTime      @default(now())
  task      Task          @relation("TaskActivities", fields: [taskId], references: [id])
  taskId    String
  by        User          @relation("UserActivities", fields: [byId], references: [id])
  byId      String
}

model SubTask {
  id       String   @id @default(uuid())
  title    String?
  date     DateTime?
  tag      String?
  task     Task     @relation("TaskSubTasks", fields: [taskId], references: [id])
  taskId   String
}

model Notice {
  id        String   @id @default(uuid())
  text      String?
  task      Task?    @relation("TaskNotices", fields: [taskId], references: [id])
  taskId    String?
  notiType  String   @default("alert")
  isRead    NoticeIsRead[] @relation("NoticeReads")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NoticeIsRead {
  id        String   @id @default(uuid())
  notice    Notice   @relation("NoticeReads", fields: [noticeId], references: [id])
  noticeId  String
  user      User     @relation("UserNotices", fields: [userId], references: [id])
  userId    String

  @@unique([noticeId, userId]) // Ensures a user can only read a notice once
}
